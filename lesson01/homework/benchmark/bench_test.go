package main

import (
	"testing"
)

var result string

func BenchmarkFmorte(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result = FormatFmorte(0)
		result = FormatFmorte(1)
		result = FormatFmorte(3)
		result = FormatFmorte(5)
		result = FormatFmorte(10)
		result = FormatFmorte(14)
		result = FormatFmorte(16)
		result = FormatFmorte(21)
		result = FormatFmorte(32)
		result = FormatFmorte(64)
		result = FormatFmorte(105)
		result = FormatFmorte(112)
		result = FormatFmorte(234)
		result = FormatFmorte(245)
		result = FormatFmorte(465)
		result = FormatFmorte(678)
		result = FormatFmorte(1012)
		result = FormatFmorte(1023)
		result = FormatFmorte(1453)
		result = FormatFmorte(10235)
		result = FormatFmorte(121024)
		result = FormatFmorte(6451235)
		result = FormatFmorte(12321648)
		result = FormatFmorte(511235487)
	}
}

func BenchmarkGrigory(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result = FormatGrigory(0)
		result = FormatGrigory(1)
		result = FormatGrigory(3)
		result = FormatGrigory(5)
		result = FormatGrigory(10)
		result = FormatGrigory(14)
		result = FormatGrigory(16)
		result = FormatGrigory(21)
		result = FormatGrigory(32)
		result = FormatGrigory(64)
		result = FormatGrigory(105)
		result = FormatGrigory(112)
		result = FormatGrigory(234)
		result = FormatGrigory(245)
		result = FormatGrigory(465)
		result = FormatGrigory(678)
		result = FormatGrigory(1012)
		result = FormatGrigory(1023)
		result = FormatGrigory(1453)
		result = FormatGrigory(10235)
		result = FormatGrigory(121024)
		result = FormatGrigory(6451235)
		result = FormatGrigory(12321648)
		result = FormatGrigory(511235487)
	}
}

func BenchmarkKislov(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result = FormatKislov(0)
		result = FormatKislov(1)
		result = FormatKislov(3)
		result = FormatKislov(5)
		result = FormatKislov(10)
		result = FormatKislov(14)
		result = FormatKislov(16)
		result = FormatKislov(21)
		result = FormatKislov(32)
		result = FormatKislov(64)
		result = FormatKislov(105)
		result = FormatKislov(112)
		result = FormatKislov(234)
		result = FormatKislov(245)
		result = FormatKislov(465)
		result = FormatKislov(678)
		result = FormatKislov(1012)
		result = FormatKislov(1023)
		result = FormatKislov(1453)
		result = FormatKislov(10235)
		result = FormatKislov(121024)
		result = FormatKislov(6451235)
		result = FormatKislov(12321648)
		result = FormatKislov(511235487)
	}
}
func BenchmarkKostechuk(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result = FormatKostechuk(0)
		result = FormatKostechuk(1)
		result = FormatKostechuk(3)
		result = FormatKostechuk(5)
		result = FormatKostechuk(10)
		result = FormatKostechuk(14)
		result = FormatKostechuk(16)
		result = FormatKostechuk(21)
		result = FormatKostechuk(32)
		result = FormatKostechuk(64)
		result = FormatKostechuk(105)
		result = FormatKostechuk(112)
		result = FormatKostechuk(234)
		result = FormatKostechuk(245)
		result = FormatKostechuk(465)
		result = FormatKostechuk(678)
		result = FormatKostechuk(1012)
		result = FormatKostechuk(1023)
		result = FormatKostechuk(1453)
		result = FormatKostechuk(10235)
		result = FormatKostechuk(121024)
		result = FormatKostechuk(6451235)
		result = FormatKostechuk(12321648)
		result = FormatKostechuk(511235487)
	}
}
func BenchmarkRak(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result = FormatRak(0)
		result = FormatRak(1)
		result = FormatRak(3)
		result = FormatRak(5)
		result = FormatRak(10)
		result = FormatRak(14)
		result = FormatRak(16)
		result = FormatRak(21)
		result = FormatRak(32)
		result = FormatRak(64)
		result = FormatRak(105)
		result = FormatRak(112)
		result = FormatRak(234)
		result = FormatRak(245)
		result = FormatRak(465)
		result = FormatRak(678)
		result = FormatRak(1012)
		result = FormatRak(1023)
		result = FormatRak(1453)
		result = FormatRak(10235)
		result = FormatRak(121024)
		result = FormatRak(6451235)
		result = FormatRak(12321648)
		result = FormatRak(511235487)
	}
}

func BenchmarkNikolay(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result = FormatNikolay(0)
		result = FormatNikolay(1)
		result = FormatNikolay(3)
		result = FormatNikolay(5)
		result = FormatNikolay(10)
		result = FormatNikolay(14)
		result = FormatNikolay(16)
		result = FormatNikolay(21)
		result = FormatNikolay(32)
		result = FormatNikolay(64)
		result = FormatNikolay(105)
		result = FormatNikolay(112)
		result = FormatNikolay(234)
		result = FormatNikolay(245)
		result = FormatNikolay(465)
		result = FormatNikolay(678)
		result = FormatNikolay(1012)
		result = FormatNikolay(1023)
		result = FormatNikolay(1453)
		result = FormatNikolay(10235)
		result = FormatNikolay(121024)
		result = FormatNikolay(6451235)
		result = FormatNikolay(12321648)
		result = FormatNikolay(511235487)
	}
}

func BenchmarkNina(b *testing.B) {
	for n := 0; n < b.N; n++ {
		result = FormatNina(0)
		result = FormatNina(1)
		result = FormatNina(3)
		result = FormatNina(5)
		result = FormatNina(10)
		result = FormatNina(14)
		result = FormatNina(16)
		result = FormatNina(21)
		result = FormatNina(32)
		result = FormatNina(64)
		result = FormatNina(105)
		result = FormatNina(112)
		result = FormatNina(234)
		result = FormatNina(245)
		result = FormatNina(465)
		result = FormatNina(678)
		result = FormatNina(1012)
		result = FormatNina(1023)
		result = FormatNina(1453)
		result = FormatNina(10235)
		result = FormatNina(121024)
		result = FormatNina(6451235)
		result = FormatNina(12321648)
		result = FormatNina(511235487)
	}
}
